@page "/login"
@using System.Net.Http.Json
@using System.Net.Http
@using System.Text.Json
@inject HttpClient httpClient
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
<PageTitle>Login</PageTitle>
<h1>Login Form</h1>

<div class="container">
    <div class="row">
        <div class="col-md-6">
            <form @onsubmit="HandleSubmit">
                <div class="form-group">
                    <label for="username">Username:</label>
                    <input type="text" class="form-control" id="username" @bind="username" />
                </div>
                <div class="form-group">
                    <label for="password">Password:</label>
                    <input type="password" class="form-control" id="password" @bind="password" />
                </div>
                <button type="submit" class="btn btn-primary">Submit</button>
            </form>
        </div>
    </div>
</div>

@code {
    private string username = "mahou_anisphia";
    private string password = "Magicology";

    private async Task HandleSubmit()
    {
        var content = new StringContent(@"{""username"": """ + username + @""", ""password"": """ + password + @"""}", System.Text.Encoding.UTF8, "application/json");
        var response = await httpClient.PostAsync("https://club-media-api.vercel.app/api/auth/login", content);

        if (response.IsSuccessStatusCode)
        {
            var tokenJson = await response.Content.ReadAsStringAsync();
            var tokenObject = JsonSerializer.Deserialize<Dictionary<string, string>>(tokenJson);
            var token = tokenObject["token"];
            // Save the token securely to localStorage or sessionStorage
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", "token", token);
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", "username", username);
            // Redirect to home page upon successful login
            NavigationManager.NavigateTo("/");
            // Notify the user
            await DisplayAlert("Login successful!", "alert-success");
        }
        else if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
        {
            await DisplayAlert("Invalid username or password. Please try again.", "alert-danger");
        }
        else if (response.StatusCode == System.Net.HttpStatusCode.InternalServerError)
        {
            await DisplayAlert("An internal server error occurred. Please try again later.", "alert-danger");
        }
        else
        {
            await DisplayAlert("An unexpected error occurred. Please try again later.", "alert-danger");
        }
    }

    private async Task DisplayAlert(string message, string alertClass)
    {
        // JavaScript alert to display the message
        await JSRuntime.InvokeVoidAsync("alert", message);
    }
}
